===========================================================================
===========================================================================

; Default ancestor
;
; Strategy: Scan backwards through core to find "5 4 3 2 1".
;           Scan forwards through core to find "1 2 3 4 5".
;           When both are found, copy repeatedly to new location.
;
DAT 5 4 3 2 1

DAT 0 0 0 1 0
IF -1.3 EQ -1.4 @-1.2 $5
IF -2.3 NE -2.3 @-2.2 $5
IF -3.3 SUB -3.2 -3.2 $1
IF -4.4 ADD 1.2 -4.2 $0

DAT 0 0 0 1 0
IF -1.3 EQ -1.4 @-1.2 $4
IF -2.3 NE -2.3 @-2.2 $4
IF -3.3 SUB -3.2 -3.2 $1
IF -4.4 ADD 1.2 -4.2 $0

DAT 0 0 0 1 0
IF -1.3 EQ -1.4 @-1.2 $3
IF -2.3 NE -2.3 @-2.2 $3
IF -3.3 SUB -3.2 -3.2 $1
IF -4.4 ADD 1.2 -4.2 $0

DAT 0 0 0 1 0
IF -1.3 EQ -1.4 @-1.2 $2
IF -2.3 NE -2.3 @-2.2 $2
IF -3.3 SUB -3.2 -3.2 $1
IF -4.4 ADD 1.2 -4.2 $0

DAT 0 0 0 1 0
IF -1.3 EQ -1.4 @-1.2 $1
IF -2.3 NE -2.3 @-2.2 $1
IF -3.3 SUB -3.2 -3.2 $1
IF -4.4 ADD 1.2 -4.2 $0

DAT 0 0 0 0 0

;DAT 0 0 0 -8 21
;IF -1.2 ADD -1.3 -1.3 $1
;IF -2.2 ADD -2.4 -2.4 $1
;IF -3.2 ADD @-3.4 @-3.3 $0
;DAT 1 2 3 4 5

===========================================================================
===========================================================================

; Default ancestor
;
; Strategy: Scan backwards through core to find "5 4 3 2 1".
;           Scan forwards through core to find "1 2 3 4 5".
;           When both are found, copy repeatedly to new location.
;
DAT 5 4 3 2 1

;---------------------------------------------------------------------------

IF 2.2 EQ 2.3 2.4 $5
IF 1.2 NE 1.2 1.4 $5
DAT 0 0 1 0 0
ADD -1.4 1.3 1.4
DAT 0 0 0 0 0
ADD -1.4 2.3 2.4
ADD -2.3 1.2 $0
DAT 0 0 0 0 0
ADD -1.2 17.3 $0
ADD -2.4 10.3 13.3
ADD -3.3 3.3 6.3

IF -9.2 SUB 1.4 1.4 $1
DAT 0 0 0 0 0

DAT 0 0 0 0 0
ADD -1.4 -2.4 $0
EQ -2.3 @-2.4 $5

DAT 0 0 0 0 0
ADD -1.4 -5.4 $-3.1
EQ -2.3 @-2.4 $4

DAT 0 0 0 0 0
ADD -1.4 -8.4 $-6.2
EQ -2.3 @-2.4 $3

DAT 0 0 0 0 0
ADD -1.4 -11.4 $-9.3
EQ -2.3 @-2.4 $2

DAT 0 0 0 0 0
ADD -1.4 -14.4 $-12.4
EQ -2.3 @-2.4 $1

;---------------------------------------------------------------------------

DAT 0 0 0 1 0
ADD -1.2 -27.3 5.3
IF -2.3 NE -2.3 -2.2 $2
SUB 29.2 -3.3 $1

;---------------------------------------------------------------------------

IF 2.2 EQ 2.3 2.4 $5
IF 1.2 NE 1.2 1.4 $5
DAT 0 0 1 0 0
ADD -1.4 1.3 1.4
DAT 0 0 0 0 0
ADD -1.4 2.3 2.4
ADD -2.3 1.2 $0
DAT 0 0 0 0 0
ADD -1.2 17.3 $0
ADD -2.4 10.3 13.3
ADD -3.3 3.3 6.3

IF -9.2 ADD 1.4 1.4 $1
DAT 0 0 0 0 0

DAT 0 0 0 0 0
ADD -1.4 -2.4 $0
EQ -2.3 @-2.4 $1

DAT 0 0 0 0 0
ADD -1.4 -5.4 $-3.1
EQ -2.3 @-2.4 $2

DAT 0 0 0 0 0
ADD -1.4 -8.4 $-6.2
EQ -2.3 @-2.4 $3

DAT 0 0 0 0 0
ADD -1.4 -11.4 $-9.3
EQ -2.3 @-2.4 $4

DAT 0 0 0 0 0
ADD -1.4 -14.4 $-12.4
EQ -2.3 @-2.4 $5

;---------------------------------------------------------------------------

DAT 0 0 0 0 0
IF -1.2 ADD -1.3 -49.4 $-46.2
IF -2.2 ADD -2.4 -18.4 $-16.4
DAT 0 0 1 0 0
IF -1.2 EQ -1.2 -4.2 $0
IF -2.2 NE -2.3 -5.2 $0
IF -3.3 ADD 2.3 -6.3 $-6.0
IF -4.3 SUB 1.4 -7.4 -7.3
DAT 0 0 0 0 0
IF -6.3 ADD -1.2 $0 $1
IF -2.2 ADD -2.3 -2.3 $1
IF -3.2 SUB -3.4 -3.4 $1
IF -4.2 EQ 1.2 -4.4 $0
DAT 0 0 0 0 151
IF -1.2 ADD -6.2 $0 $0
IF -7.2 ADD @-2.4 @-7.3 $0
IF -8.2 ADD -3.4 -3.4 $1
IF -4.2 MUL -4.4 -4.4 $5

;---------------------------------------------------------------------------

DAT 1 2 3 4 5

===========================================================================
===========================================================================

At this point I think it's worth reconsidering the design a little.

 - conditionals should perhaps support UNLESS as well as IF
    - because there's a pattern of IF x NE x y z to implement a latch
    - it'd be nice to be able to complement this e.g.
      	DAT 0 0 1 0 0
        IF -1.2 NE -1.2 -1.3 $0

	DAT 0 0 0 0 0
	UNLESS -1.2 EQ -1.2 -1.3 $0

 - perhaps instructions should have state internally?
    - they kind of do already, but it's awkward when more than one
      instruction wants to share the current value of a piece of state
    - maybe an extra INDIRECT+OFFSET addressing mode would help??

 - there are problems with some addresses being relative to
   instruction start and others to sub-instruction position

 - instructions start on (0 mod 5) boundaries. Not cool when the space
   is 2^n cells long. It means copying a program across the wrap
   breaks the program.

 - symbolic labels would make life MUCH easier
